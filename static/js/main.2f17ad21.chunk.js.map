{"version":3,"sources":["components/Section.js","components/Header.js","components/LogHeader.js","components/UserSignIn.js","components/UserSignUp.js","App.js","serviceWorker.js","index.js"],"names":["Section","props","onChange","handleChange","className","id","Question","htmlFor","Options","type","name","value","Header","to","style","textDecoration","LogHeader","UserSignIn","UserSignUp","onSubmit","fontSize","App","exact","path","component","MainSection","state","Quiz","ansrs","score","tAndf","show","display","match","params","bind","showScore","event","target","this","setState","prevState","preventDefault","scr","tF","shw","i","length","Ans","console","log","fetch","then","res","json","result","qanda","error","isLoaded","answers","map","ab","key","qid","qsection","Qiz","true","onClick","React","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2f17ad21.chunk.js","sourcesContent":["import React from \"react\";\r\nimport '../styles/styles.css'\r\n\r\nfunction Section(props) {\r\n\r\n\r\n\r\n  return (\r\n\r\n    <form onChange={props.handleChange}>\r\n      <div className=\"form-card\">\r\n\r\n        <div className=\"Q-card\">\r\n          <h3>Question {props.id + 1} :</h3>\r\n          <p>{props.Question}</p>\r\n        </div>\r\n        <div className=\"options-card\">\r\n\r\n\r\n          <label htmlFor={props.Options[0]} className=\"options\">\r\n            <input\r\n              type=\"radio\"\r\n              name={props.id}\r\n              value={props.Options[0]}\r\n              id={props.Options[0]}\r\n            />\r\n            <p>{props.Options[0]}</p>\r\n          </label>\r\n\r\n\r\n          <label htmlFor={props.Options[1]} className=\"options\">\r\n            <input\r\n              type=\"radio\"\r\n              name={props.id}\r\n              value={props.Options[1]}\r\n              id={props.Options[1]}\r\n            />\r\n            <p>{props.Options[1]}</p>\r\n          </label>\r\n          <label htmlFor={props.Options[2]} className=\"options\">\r\n            <input\r\n              type=\"radio\"\r\n              name={props.id}\r\n              value={props.Options[2]}\r\n              id={props.Options[2]}\r\n            />\r\n            <p>{props.Options[2]}</p>\r\n          </label>\r\n          <label htmlFor={props.Options[3]} className=\"options\">\r\n            <input\r\n              type=\"radio\"\r\n              name={props.id}\r\n              value={props.Options[3]}\r\n              id={props.Options[3]}\r\n            />\r\n            <p>{props.Options[3]}</p>\r\n          </label>\r\n        </div>\r\n\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nfunction Header() {\r\n  return (\r\n\r\n    <div className=\"head-1\">\r\n      <h1>Take your Quiz </h1>\r\n      <div className=\"signForm\">\r\n        <Link to=\"/SignUp\" style={{ textDecoration: \"none\" }}>\r\n          <button className=\"signBtn\">Sign-Up</button>\r\n        </Link>\r\n\r\n        <Link to=\"/SignIn\" style={{ textDecoration: \"none\" }}>\r\n          <button className=\"signBtn\">Sign-In</button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\n\r\n\r\nfunction LogHeader() {\r\n    return (\r\n        <div className=\"head-1\">\r\n        <h1>Take your Quiz </h1>\r\n        \r\n        </div>\r\n      \r\n    )\r\n}\r\n\r\nexport default LogHeader\r\n","import React from 'react'\r\n\r\nfunction UserSignIn() {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserSignIn\r\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nfunction UserSignUp(props) {\r\n\r\n     \r\n    return (\r\n        <div className = \"sign\">\r\n            <h1>Sign up</h1>\r\n            \r\n            <form onSubmit = {null}>\r\n              <p style={{fontSize:25}}>Email:</p>\r\n              \r\n              <input type=\"Email\" name = \"email\"/>  \r\n              \r\n              <br/>\r\n              <p style={{fontSize:25}}>Password:</p>\r\n              \r\n              <input type=\"Password\" name = \"password\"/>\r\n              <br/>\r\n              <br/>\r\n              <Link to=\"/\" style={{ textDecoration: \"none\" }}> \r\n              <button type=\"Submit\" className=\"subBtn\">Submit</button>\r\n              </Link>\r\n             \r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default UserSignUp\r\n\r\n","import React from \"react\";\r\nimport \"./styles/styles.css\";\r\nimport \"./App.css\";\r\nimport Section from \"./components/Section\";\r\nimport Header from \"./components/Header\";\r\nimport LogHeader from \"./components/LogHeader\";\r\n// import Quiz from \"./components/quiz\";\r\nimport UserSignIn from \"./components/UserSignIn\";\r\nimport UserSignUp from \"./components/UserSignUp\";\r\n// import axios from \"axios\";\r\nimport { BrowserRouter as Router,\r\n  Switch,\r\n  Route, } from \"react-router-dom\";\r\n  // Link,\r\n  // Redirect,\r\n  // useHistory,\r\n  // useLocation, useParams, useRouteMatch\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Header />\r\n          </Route>\r\n          <Route path=\"/quizUrl/:id\" component={MainSection} />\r\n           \r\n            \r\n          \r\n\r\n          <Route path=\"/SignUp\">\r\n            <UserSignUp />\r\n          </Route>\r\n\r\n          <Route path=\"/SignIn\">\r\n            <UserSignIn />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n\r\nclass MainSection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      Quiz: [],\r\n      ansrs: [],\r\n      score: null,\r\n      tAndf: [],\r\n      show: { display: \"none\" },\r\n      id:props.match.params.id\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.showScore = this.showScore.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    var value = event.target.value;\r\n    var name = event.target.name;\r\n\r\n\r\n    this.setState((prevState) => {\r\n      prevState.ansrs[name] = value;\r\n      return { ansrs: prevState.ansrs };\r\n    });\r\n  }\r\n\r\n  showScore(event) {\r\n    event.preventDefault();\r\n    var scr = 0;\r\n    var tF = [];\r\n    var shw = { display: \"block\" };\r\n    for (let i = 0; i <= this.state.Quiz.length - 1; i++) {\r\n      if (this.state.Quiz[i].Ans === this.state.ansrs[i]) {\r\n        scr = scr + 1;\r\n        tF[i] = true;\r\n      } else {\r\n        tF[i] = false;\r\n      }\r\n    }\r\n\r\n    this.setState((prevState) => {\r\n      prevState.score = scr;\r\n      prevState.tAndf = tF;\r\n      prevState.show = shw;\r\n      return {\r\n        score: prevState.score,\r\n        tAndf: prevState.tAndf,\r\n        show: prevState.show,\r\n      };\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(this.state.id);\r\n    fetch(`http://localhost:4000/quizQ/${this.state.id}`)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            Quiz:result.qanda\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n\r\n    // var xhr = new XMLHttpRequest();\r\n\r\n    // xhr.withCredentials = \"true\";\r\n    // xhr.addEventListener(\"readystatechange\", function () {\r\n    //   if (this.readyState === 4) {\r\n    //     console.log(this.responseText);\r\n    //     var quizdata = JSON.parse(this.responseText)\r\n    //     console.log(quizdata);\r\n    //   }\r\n    // });\r\n\r\n    // xhr.open(\"GET\", \"http://localhost:4000/quizQ\");\r\n\r\n    // xhr.send();\r\n    \r\n    \r\n    // axios.get(`http://localhost:4000/quizQ/${this.state.id}`).then((res) => {\r\n    //   console.log(\"Response Succeed\");\r\n    //   var resdata = res.data\r\n    //   // console.log(resdata);\r\n    //   this.setState(\r\n    //     { Quiz: resdata.qanda }\r\n    //   );\r\n    // }).catch(err => { console.log(err) })\r\n  }\r\n\r\n  render() {\r\n    \r\n\r\n    // console.log(\"from render \"+this.state.Quiz[0]);\r\n\r\n    const answers = this.state.Quiz.map((ab) => {\r\n      return (\r\n        <li key={ab.qid}>\r\n          {ab.qid + 1 + \". \"}\r\n          {ab.Ans}\r\n        </li>\r\n      );\r\n    });\r\n    const qsection = this.state.Quiz.map((Qiz) => {\r\n      return (\r\n        <Section\r\n          key={Qiz.qid}\r\n          id={Qiz.qid}\r\n          Question={Qiz.Question}\r\n          Options={Qiz.Options}\r\n          handleChange={this.handleChange}\r\n          true={this.state.tAndf}\r\n        />\r\n      );\r\n    });\r\n\r\n    return (\r\n       <div>\r\n         <LogHeader/>\r\n          <section>\r\n        {qsection}\r\n\r\n        <div style={this.state.show} className=\"scores\">\r\n          <h1>Your Score : {this.state.score + \"/\" + this.state.Quiz.length}</h1>\r\n          <div className=\"answers\">\r\n            <h1>Correct Answers:</h1>\r\n            <ul>{answers}</ul>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"s-button\">\r\n          <button onClick={this.showScore}>Submit Answer</button>\r\n        </div>\r\n      </section>\r\n       </div>\r\n     \r\n    );\r\n  }\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}